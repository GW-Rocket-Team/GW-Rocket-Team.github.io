[{
  "name": "About Hugo",
  "description": "Hugo is a static site engine written in Go.It makes use of a variety of open source projects including: Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.Setup Some fun facts about Hugo: Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions?",
  "body": " Hugo is a static site engine written in Go.It makes use of a variety of open source projects including: Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.Setup Some fun facts about Hugo: Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions? Feel free to open an issue on GitHub or ask me on Twitter.Thanks for reading!",
  "url": "https://GW-Rocket-Team.github.io/about/"
},{
  "name": "Example Configs",
  "description": "To help you set up your site with BluestNight, you can download a template config.toml. If you use a server with Nginx, you can also download a template configuration file to place in /etc/nginx/conf.d/.If you have any experience writing configuration files for Apache servers or .htaccess files, please contribute to this issue on GitLab.",
  "body": "To help you set up your site with BluestNight, you can download a template config.toml. If you use a server with Nginx, you can also download a template configuration file to place in /etc/nginx/conf.d/.If you have any experience writing configuration files for Apache servers or .htaccess files, please contribute to this issue on GitLab.",
  "url": "https://GW-Rocket-Team.github.io/docs/example-configs/"
},{
  "name": "Creating a New Theme",
  "description": "Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.We&amp;rsquo;ll start with creating a new site with a very basic template.",
  "body": " Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.Here&amp;rsquo;s an example:## this is a comment $ echo this is a command this is a command ## edit the file $vi foo.md +++ date = &#34;2014-09-28&#34; title = &#34;creating a new theme&#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = &#34;2014-09-28&#34; title = &#34;creating a new theme&#34; +++ bah and humbug $ Some Definitions There are a few concepts that you need to understand before creating a theme.Skins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.You have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.Your second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?The difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.The rest of this tutorial will call a skin created in the themes/ directory a theme.Note that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.The Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.Site Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.Content Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.Front Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.The information in the front matter is passed into the template before the content is rendered into HTML.Markdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.Template Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.Please note that you can use the front matter to influence Hugo’s choice of templates.Single Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.List Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.Partial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.Create a New Site Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.Generate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The &amp;ldquo;--verbose&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.We can verify that the command worked by looking at the directory again.$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.Test the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:index.xml sitemap.xml That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.Let’s go back and look at those warnings again.WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.Create a New Theme Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.Create a Skeleton Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.$ vi themes/zafta/theme.toml author = &#34;michael d henderson&#34; description = &#34;a minimal working template&#34; license = &#34;MIT&#34; name = &#34;zafta&#34; source_repo = &#34;&#34; tags = [&#34;tags&#34;, &#34;categories&#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says &#34;YOUR_NAME_HERE&#34; Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.$ vi config.toml theme = &#34;zafta&#34; baseurl = &#34;&#34; languageCode = &#34;en-us&#34; title = &#34;zafta - totally refreshing&#34; MetaDataFormat = &#34;toml&#34; :wq $ Generate the Site Now that we have an empty theme, let&amp;rsquo;s generate the site again.$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things: Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy: Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.Check the main Hugo site for information on using Git with Hugo.Purge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.Hugo&amp;rsquo;s Watch Option Hugo&amp;rsquo;s &amp;ldquo;--watch&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.Live Reload Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;Development Commands Use the following commands as the basis for your workflow.## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [&#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory: index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.Make a Static Home Page Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.$ vi themes/zafta/layouts/index.html   hugo says hello!  :wq $ Build the web site and then verify the results.$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name &#39;*.html&#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html   hugo says hello! Live Reload Note: If you&amp;rsquo;re running the server with the --watch option, you&amp;rsquo;ll see different content in the file:$ cat public/index.html   hugo says hello!document.write(&#39;&#39;)  When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page &amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.Create New Posts Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.Hugo has a command to generate a skeleton post, just like it does for sites and themes.$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast  to map[string]interface{} $ That wasn&amp;rsquo;t very nice, was it?The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.$ vi themes/zafta/archetypes/post.md +++ Description = &#34;&#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = &#34;&#34; Tags = [] date = &#34;2014-09-29T21:54:53-05:00&#34; title = &#34;first&#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = &#34;&#34; Tags = [] date = &#34;2014-09-29T21:57:09-05:00&#34; title = &#34;second&#34; +++ my second post $ Build the web site and then verify the results.$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{&#34;category&#34;:&#34;categories&#34;, &#34;tag&#34;:&#34;tags&#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:$ find public -type f -name &#39;*.html&#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.List and Single Templates In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.Add Content to the Homepage The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.$ vi themes/zafta/layouts/index.html   {{ range first 10 .Data.Pages }} {{ .Title }} {{ end }}   :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo;. In our template, the commands are: range .Title end  The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.Build the web site and then verify the results.$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{&#34;tag&#34;:&#34;tags&#34;, &#34;category&#34;:&#34;categories&#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name &#39;*.html&#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html   second first   $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.Add Content to the Posts We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.Now that we know the search rule, let&amp;rsquo;s see what we actually have available:$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.Update the Template File $ vi themes/zafta/layouts/_default/single.html   {{ .Title }}   {{ .Title }} {{ .Content }}   :wq $ Build the web site and verify the results.$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{&#34;tag&#34;:&#34;tags&#34;, &#34;category&#34;:&#34;categories&#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name &#39;*.html&#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html   first   first my first post  $ cat public/post/second/index.html   second   second my second post  $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.Linking to Content The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.$ vi themes/zafta/layouts/index.html   {{ range first 10 .Data.Pages }} {{ .Title }} {{ end }}   Build the web site and verify the results.$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{&#34;tag&#34;:&#34;tags&#34;, &#34;category&#34;:&#34;categories&#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name &#39;*.html&#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html   second first   $ Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.Creating Top Level Pages Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:$ vi content/about.md +++ title = &#34;about&#34; description = &#34;about this site&#34; date = &#34;2014-09-27&#34; slug = &#34;about time&#34; +++ ## about us i&#39;m speechless :wq Generate the web site and verify the results.$ find public -name &#39;*.html&#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/&amp;rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.One other thing. Take a look at the home page.$ cat public/index.html   creating a new theme about second first document.write(&#39;&#39;)  Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.$ vi themes/zafta/layouts/index.html   posts {{ range first 10 .Data.Pages }} {{ if eq .Type &#34;post&#34;}} {{ .Title }} {{ end }} {{ end }} pages {{ range .Data.Pages }} {{ if eq .Type &#34;page&#34; }} {{ .Title }} {{ end }} {{ end }}   :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.But, that about page still renders to about-time/index.html.$ find public -name &#39;*.html&#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.$ vi config.toml [permalinks] page = &#34;/:title/&#34; about = &#34;/:filename/&#34; Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.Sharing Templates If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.Create the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.$ vi themes/zafta/layouts/partials/header.html   {{ .Title }}   :wq $ vi themes/zafta/layouts/partials/footer.html   :wq Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:{{ template &amp;quot;theme/partials/header.html&amp;quot; . }}  versus{{ partial &amp;quot;header.html&amp;quot; . }}  Both pass in the context.Let&amp;rsquo;s change the home page template to use these new partials.$ vi themes/zafta/layouts/index.html {{ partial &#34;header.html&#34; . }} posts {{ range first 10 .Data.Pages }} {{ if eq .Type &#34;post&#34;}} {{ .Title }} {{ end }} {{ end }} pages {{ range .Data.Pages }} {{ if or (eq .Type &#34;page&#34;) (eq .Type &#34;about&#34;) }} {{ .Type }} - {{ .Title }} - {{ .RelPermalink }} {{ end }} {{ end }} {{ partial &#34;footer.html&#34; . }} :wq Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.Update the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial &#34;header.html&#34; . }} {{ .Title }} {{ .Content }} {{ partial &#34;footer.html&#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.Add “Date Published” to Posts It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.Add “Date Published” to the Template We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}  Posts use the default single template, so we&amp;rsquo;ll change that file.$ vi themes/zafta/layouts/_default/single.html {{ partial &#34;header.html&#34; . }} {{ .Title }} {{ .Date.Format &#34;Mon, Jan 2, 2006&#34; }} {{ .Content }} {{ partial &#34;footer.html&#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.Let&amp;rsquo;s restore the default single template before we forget.$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial &#34;header.html&#34; . }} {{ .Title }} {{ .Content }} {{ partial &#34;footer.html&#34; . }} :wq Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.$ vi themes/zafta/layouts/post/single.html {{ partial &#34;header.html&#34; . }} {{ .Title }} {{ .Date.Format &#34;Mon, Jan 2, 2006&#34; }} {{ .Content }} {{ partial &#34;footer.html&#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.Don&amp;rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.",
  "url": "https://GW-Rocket-Team.github.io/post/creating-a-new-theme/"
},{
  "name": "(Hu)go Template Primer",
  "description": "Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.This document is a brief primer on using go templates.",
  "body": " Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.This document is a brief primer on using go templates. The go docs provide more details.Introduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that go templates parse very quickly.A unique characteristic of go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the go docs.Basic Syntax Go lang templates are html files with the addition of variables and functions.Go variables and functions are accessible within {{ }}Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:{{ foo }}  Parameters are separated using spacesCalling the add function with input of 1, 2:{{ add 1 2 }}  Methods and fields are accessed via dot notationAccessing the Page Parameter &amp;ldquo;bar&amp;rdquo;{{ .Params.bar }}  Parentheses can be used to group items together{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}  Variables Each go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.A variable is accessed by referencing the variable name.&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;  Variables can also be defined and referenced.{{ $address := &amp;quot;123 Main St.&amp;quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.Example:{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.Example:{{ template &amp;quot;chrome/header.html&amp;quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.Iteration Just like in go, the go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.Example 1: Using Context{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, &amp;amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.Go Templates treat the following values as false: false 0 any array, slice, map, or string of length zero  Example 1: If{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}  Example 2: If -&amp;gt; Else{{ if isset .Params &amp;quot;alt&amp;quot; }} {{ index .Params &amp;quot;alt&amp;quot; }} {{else}} {{ index .Params &amp;quot;caption&amp;quot; }} {{ end }}  Example 3: And &amp;amp; Or{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}  Example 4: WithAn alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.The first example above could be simplified as:{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}  Example 5: If -&amp;gt; Else If{{ if isset .Params &amp;quot;alt&amp;quot; }} {{ index .Params &amp;quot;alt&amp;quot; }} {{ else if isset .Params &amp;quot;caption&amp;quot; }} {{ index .Params &amp;quot;caption&amp;quot; }} {{ end }}  Pipes One of the most powerful components of go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the input of the following pipe.Because of the very simple syntax of go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.A few simple examples should help convey how to use the pipe.Example 1 :{{ if eq 1 1 }} Same {{ end }}  is the same as{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.Example 2 :{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}  Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.Example 3 :{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}} Stuff Here {{ end }}  Could be rewritten as{{ isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.Example: {{ $title := .Site.Title }} {{ range .Params.tags }} &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.Hugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.Using Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.An example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.Here is the example front matter:--- title: &amp;quot;Permalinks&amp;quot; date: &amp;quot;2013-11-18&amp;quot; aliases: - &amp;quot;/doc/permalinks/&amp;quot; groups: [&amp;quot;extras&amp;quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template: {{ if not .Params.notoc }} &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt; {{ .TableOfContents }} &amp;lt;/div&amp;gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.For instance, you might declare:params: CopyrightHTML: &#34;Copyright © 2013 John Doe. All Rights Reserved.&#34; TwitterUser: &#34;spf13&#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a &amp;lt;footer&amp;gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt; &amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt; &amp;lt;/footer&amp;gt;{{end}}  An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot; alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/span&amp;gt;{{end}}  Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do so, such as in this example:&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt; &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; {{end}}&amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt;  ",
  "url": "https://GW-Rocket-Team.github.io/post/goisforlovers/"
},{
  "name": "Getting Started with Hugo",
  "description": "Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.Save it somewhere specific as we will be using it in the next step.More complete instructions are available at installing hugoStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.Follow the following steps: Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:",
  "body": " Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.Save it somewhere specific as we will be using it in the next step.More complete instructions are available at installing hugoStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.Follow the following steps: Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:git clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs &amp;gt; 29 pages created &amp;gt; 0 tags index created &amp;gt; in 27 ms &amp;gt; Web Server is available at http://localhost:1313 &amp;gt; Press ctrl+c to stop  Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.Step 3. Change the docs site Stop the Hugo process by hitting ctrl+c.Now we are going to run hugo again, but this time with hugo in watch mode./path/to/hugo/from/step/1/hugo server --source=./docs --watch &amp;gt; 29 pages created &amp;gt; 0 tags index created &amp;gt; in 27 ms &amp;gt; Web Server is available at http://localhost:1313 &amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content &amp;gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.Content files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.Change and save this file.. Notice what happened in your terminal.&amp;gt; Change detected, rebuilding site &amp;gt; 29 pages created &amp;gt; 0 tags index created &amp;gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.Step 4. Have fun The best way to learn something is to play with it.",
  "url": "https://GW-Rocket-Team.github.io/post/hugoisforlovers/"
},{
  "name": "Migrate to Hugo from Jekyll",
  "description": "Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.",
  "body": " Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.Create your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.Set your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you&amp;rsquo;ll want to do one of two alternatives: Change your submodule to point to map gh-pages to public instead of _site (recommended).git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public  Or, change the Hugo configuration to use _site instead of public.{ .. &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;, .. }   Convert Jekyll templates to Hugo templates That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll&amp;rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo&amp;rsquo;s template to learn Hugo&amp;rsquo;s way.As a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.Convert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It&amp;rsquo;s fairly trivial to do a port.Implementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.Jekyll&amp;rsquo;s plugin:module Jekyll class ImageTag &amp;lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)&amp;quot;(.*?)&amp;quot;(\\s+)-&amp;gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)&amp;quot;(.*?)&amp;quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot; else source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot; end if @link source += &amp;quot;&amp;lt;a href=\\&amp;quot;#{@link}\\&amp;quot;&amp;gt;&amp;quot; end source += &amp;quot;&amp;lt;img src=\\&amp;quot;#{@url}\\&amp;quot;&amp;gt;&amp;quot; if @link source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot; end source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot; source end end end Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)  is written as this Hugo shortcode:&amp;lt;!-- image --&amp;gt; &amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt; {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }} &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt; {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }} {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}} &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }} {{ .Get &amp;quot;title&amp;quot; }}{{ end }} {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt; {{ .Get &amp;quot;caption&amp;quot; }} {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }} {{ .Get &amp;quot;attr&amp;quot; }} {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }} &amp;lt;/p&amp;gt; {{ end }} &amp;lt;/figcaption&amp;gt; {{ end }} &amp;lt;/figure&amp;gt; &amp;lt;!-- image --&amp;gt;  Usage I simply changed:{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.Finishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.Clean up You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.A practical example in a diff Hey, it&amp;rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.",
  "url": "https://GW-Rocket-Team.github.io/post/migrate-from-jekyll/"
},{
  "name": "Alert",
  "description": "Use an alert if you need to make sure that your reader&amp;rsquo;s eye is brought to some important information before they get to the main content. You can have site-wide and page-specific alerts, which work the same except for where they are set.",
  "body": "Use an alert if you need to make sure that your reader&amp;rsquo;s eye is brought to some important information before they get to the main content. You can have site-wide and page-specific alerts, which work the same except for where they are set.Limitations: - Alerts cannot be dismissed by the reader - Alerts do not support shortcodes, since they are set in the site config and/or page front matter.Site-Wide Alerts Site-wide alerts appear above both the main content and the sidebar on every page. Use these for important announcements that readers need to see no matter where on the site they are. Long announcements should go into their own blog post, with a link included in the alert.To set a site-wide alert, set the value of alert under Params in the config file to the content of the alert.[Params] alert = &amp;quot;This is my site-wide \\&amp;quot;alert\\&amp;quot; content *with* Markdown.&amp;quot;  Page-Specific Alerts Page-specific alerts appear above the content of a page but below the page title and metadata (publish date, etc). Use these to indicate important information about the page, perhaps about how an article was updated or how the content is not suitable for young readers.To set a page-specific alert, set the value of alert in the page&amp;rsquo;s front matter to the content of the alert.+++ title = &amp;quot;Example Page&amp;quot; alert = &amp;quot;This is my page-specific \\&amp;quot;alert\\&amp;quot; content *with* Markdown.&amp;quot; +++  Shortcode There is also an alert shortcode for when you want to have an alert box in the middle of your content.Normal content... {{% alert %}} The content of the alert box goes here. {{% /alert %}} More normal content... ",
  "url": "https://GW-Rocket-Team.github.io/docs/site/alert/"
},{
  "name": "Analytics",
  "description": "BluestNight comes with support for Piwik as an site analytics provider. This requires having a Piwik instance hosted somewhere, either self-hosted or hosted by Innocraft. The theme uses the JavaScript tracking client.",
  "body": "BluestNight comes with support for Piwik as an site analytics provider. This requires having a Piwik instance hosted somewhere, either self-hosted or hosted by Innocraft. The theme uses the JavaScript tracking client.Setup Set enable to true and host to the root URL of the Piwik installation under [Params.piwik] in your site&amp;rsquo;s configuration file. If your Piwik installation tracks multiple websites, add the site ID number in site_id.# In config.toml [Params.piwik] enable = true # URL to the root of the piwik installation. # Can include paths after the TLD (e.g https://example.com/piwik/) host = &amp;quot;https://piwik.example.com&amp;quot; # ID number of this site. Defaults to 1 if not included site_id = 2 # Include &amp;lt;noscript&amp;gt; tags to track users with javascript disabled track_nojs = true # Include a link in the site footer to allow users to opt out of analytics enable_optout = true  Ajax &amp;ldquo;one-click&amp;rdquo; opt-out Piwik currently only provides an &amp;lt;iframe&amp;gt; as a method of opting out of being tracked. It sucks, looks bad on a themed page, and just generally isn&amp;rsquo;t a great idea. A user thought so too and created a plugin that allows developers to create an opt-out button. *GASP!*I recommend you install the above plugin and enable support for one-click opting out with the below configuration:# In config.toml [Params.piwik] enable = true # URL to the root of the piwik installation. # Can include paths after the TLD (e.g https://example.com/piwik/) host = &amp;quot;https://piwik.example.com&amp;quot; # Include &amp;lt;noscript&amp;gt; tags to track users with javascript disabled track_nojs = true # Include a link in the site footer to allow users to opt out of analytics enable_optout = true # Enable ajax &amp;quot;one-click&amp;quot; enable_ajax = true  Note: You will need to enable cross-domain requests in your Piwik installation and set the Access-Control-Allow-Credentials header to true on the server hosting Piwik.Nginx: In the Piwik server {} block, add the line add_header Access-Control-Allow-Credentials &amp;quot;true&amp;quot; always;Apache (including .htaccess files): Add the following to your server&amp;rsquo;s &amp;lt;VirtualHost&amp;gt; block or to a .htaccess file at the root of your Piwik installation.&amp;lt;IfModule mod_headers.c&amp;gt; SetEnvIf Origin (.*) AccessControlAllowOrigin=$1 Header add Access-Control-Allow-Origin %{AccessControlAllowOrigin}e env=AccessControlAllowOrigin Header set Access-Control-Allow-Credentials true &amp;lt;/IfModule&amp;gt; ",
  "url": "https://GW-Rocket-Team.github.io/docs/site/analytics/"
},{
  "name": "Appearance",
  "description": "Customize the appearance of your Hugo site by adding a custom background image, changing the colors used for the site, or modifying the default choice of whether to use serif or sans-serif fonts.",
  "body": " Custom Background Add the following to your site&amp;rsquo;s config.toml file:[Params.background] src = &amp;quot;images/background_lg.png&amp;quot; #medium_src = &amp;quot;images/background_med.png&amp;quot; #small_src = &amp;quot;images/background_sm.png&amp;quot; fit_width = true tile = false   Change src to the relative path from the site&amp;rsquo;s baseURL where the background image can be found. In the above example, the file would be found at {site root}/static/images/background.png. Optionally set medium_src and small_src to smaller images to use on screens that are at most 1024px and 640px, respectively. If either of these are omitted, the next largest image source will be used. Set fit_width to true if you want the behavior of CSS background-size: contain and false if you want the behavior of background-size: cover  Custom Colors Add the following to your site&amp;rsquo;s config.toml file:[Params.color] page_background = &amp;quot;#000000&amp;quot; main_background = &amp;quot;#050505&amp;quot; alt_background = &amp;quot;#252525&amp;quot; main_text = &amp;quot;#e2e2e2&amp;quot; alt_text = &amp;quot;#e2e2e2&amp;quot; accent = &amp;quot;#2c8cef&amp;quot; accent_text = &amp;quot;#e2e2e2&amp;quot;  The above values represent the default colors in the theme. Modify them as you&amp;rsquo;d like. page_background is the background color for what is &amp;ldquo;behind&amp;rdquo; the page. This is the same area as where the background image is applied, so it is a good idea to pick a color that matches the image if you use fit_width = true on the background image. main_background is the background color for most of the content page. alt_background is the alternate background color for the page. This background is applied to the navigation bar, footer, various buttons, and as the alternate color for zebra-striped tables. main_text is the font color that corresponds with main_background. alt_text is the font color that corresponds with alt_background. accent is the color applied to the site header, links, and buttons that are hovered over or marked active. accent_text is the font color that is used when accent is being used as the background color.  Font Customization BluestNight uses the following font families: Clear Sans (sans-serif) Zilla Slab (serif) Source Code Pro (monospace)  By default, Clear Sans is used for all text on the on the web page except for &amp;lt;code&amp;gt; and &amp;lt;pre&amp;gt; blocks, which use Source Code Pro, and any text inside of the handwriting shortcode. Zilla Slab is used by default for text when a page is printed.These defaults can be modified, though, through the use of four configuration properties and two shortcodes.[Params.fonts] header_style = &amp;quot;sans-serif&amp;quot; body_style = &amp;quot;sans-serif&amp;quot; print_header_style = &amp;quot;sans-serif&amp;quot; print_body_style = &amp;quot;serif&amp;quot;  The above code block shows the default values of each of the four configuration properties and how they would appear inside on a configuration file written in TOML. Properties prefixed with print_ affect printed pages only, while those without affect only the page on a screen. The header_style properties set the font family for all page headers, while the body_style ones affect the main text of the page (inside the &amp;lt;article&amp;gt; tag, for the web developers).If header_style and body_style (or print_header_style and print_body_style) match, the choice of &amp;ldquo;serif&amp;rdquo; or &amp;ldquo;sans-serif&amp;rdquo; is applied to the entire page. If they do not match, text in the footer and sidebar is ignored, unless it is a header. If you want to change the font family for a block of text on a page, you can use the {{% serif %}} and {{% sans-serif %}} shortcodes.Examples {{% serif %}} This text will **always** be *serif*. {{% /serif %}}  This text will always be serif.  {{% sans-serif %}} This text will **always** be *sans-serif*. {{% /sans-serif %}}  This text will always be sans-serif.  ",
  "url": "https://GW-Rocket-Team.github.io/docs/site/appearance/"
},{
  "name": "Authorbox",
  "description": "Use the authorbox to provide attribution to the author of a post or page.The authorbox feature is based on the member shortcode and requires the same setup in order to work.Note: if the URL key is set in the author&amp;rsquo;s data file, the &amp;lt;a&amp;gt; tag linking to the URL will have the rel=&amp;quot;author&amp;quot; attribute set on it.",
  "body": "Use the authorbox to provide attribution to the author of a post or page.The authorbox feature is based on the member shortcode and requires the same setup in order to work.Note: if the URL key is set in the author&amp;rsquo;s data file, the &amp;lt;a&amp;gt; tag linking to the URL will have the rel=&amp;quot;author&amp;quot; attribute set on it.Usage The author for authorboxes can be set sitewide and/or specific to each page.To enable authorboxes, set authorbox to true under Params in the site configuration file. An example using TOML:[Params] authorbox = true  Set Site Author To set a default author to be used on a post if authorboxes are enabled and an author isn&amp;rsquo;t set for the page, add a line under Params setting author to the value under Name in the author&amp;rsquo;s data file:[Params] authorbox = true author = &amp;quot;Michael Bryant&amp;quot;  Set Page Author Someone other than the default author has authored a post for the site and you&amp;rsquo;d like to set them as the author of just that one page. You can do so by setting the value of author in that page&amp;rsquo;s front matter.+++ title = &amp;quot;Hello, World!&amp;quot; date = &amp;quot;2016-04-09&amp;quot; # Joe is the author of this page author = &amp;quot;Joe Smith&amp;quot; +++ Lorem ipsum...  Selectively Disable You can also disable the authorbox for a particular page by setting hide_authorbox to true in the page&amp;rsquo;s front matter.+++ title = &amp;quot;Hello, World!&amp;quot; date = &amp;quot;2016-04-09&amp;quot; # Authorbox will not be shown on this page hide_authorbox = true +++ Lorem ipsum... ",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/authorbox/"
},{
  "name": "Category List",
  "description": "Add a list of your five most common categories to the sidebar.",
  "body": "Add a list of your five most common categories to the sidebar.Setup Set categories to true under Params.widgets in your site&amp;rsquo;s configuration file.# In config.toml [Params.widgets] categories = true # Enable &amp;quot;Categories&amp;quot; widget ",
  "url": "https://GW-Rocket-Team.github.io/docs/sidebar/category-list/"
},{
  "name": "Comments",
  "description": "BluestNight currently supports two comment providers: HashOver, a self-hosted provider using PHP Muut, a third-party service using only JavaScript  This page details options that apply regardless of which service you are using.",
  "body": "BluestNight currently supports two comment providers: HashOver, a self-hosted provider using PHP Muut, a third-party service using only JavaScript  This page details options that apply regardless of which service you are using.Enable/disable comments site-wide If you have enabled a certain comment provider in your site configuration file, that comment provider is enabled across the whole site (though it can be disabled on a per-page basis). To disable comments across the whole site, just remove or comment out the option in the configuration file.Disable comments on a specific page To disable comments on a specific page, set disable_comments to true in the page&amp;rsquo;s front matter.+++ title = &amp;quot;My Comment-Free Page&amp;quot; disable_comments = true +++ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam consectetur tempus tortor, eget bibendum ipsum ultricies sed. Suspendisse arcu enim, porta non sollicitudin quis, gravida ornare nulla. In vel diam felis. Nam neque mauris, facilisis non nibh in, elementum porta libero. Sed dolor arcu, tincidunt non augue porta, euismod lacinia nibh. Sed faucibus risus massa, eget fermentum tortor efficitur a. Donec sed mi sagittis, consectetur nibh eget, mollis dolor. Nulla feugiat sodales dolor non gravida. Integer semper tempor massa id tincidunt.  Hashover BluestNight supports using the HashOver self-hosted comment system. Note that this comment system requires PHP and cannot be used on services that do not support PHP.Notes  This guide assumes that you have a server set up to use PHP.** All relative paths are relative to the root of your Hugo site  This means that BluestNight is installed to themes/BluestNight   Installation BluestNight has HashOver bundled with it, so you do not need to do anything to &amp;ldquo;install&amp;rdquo; it as of this time. This may change in the future.Setup  Copy the file secrets.php from themes/BluestNight/static/hashover/scripts/secrets.php to static/hashover/scripts/secrets.php. This prevents your changes from be overridden on updates to the theme. Open static/hashover/scripts/secrets.php in your favorite text editor and find these lines:  $encryption_key = &#39;8CharKey&#39;; // Unique 8 to 32 character encryption key $notification_email = &#39;example@example.com&#39;; // E-mail for notification of new comments $admin_nickname = &#39;admin&#39;; // Nickname with admin rights (must be title-cased) $admin_password = &#39;passwd&#39;; // Password to gain admin rights  Replace the encryption key with a randomly generated key, such as from this generator. Replace the notification email with one that you want to receive notifications of new comments. Replace the admin password with a secure password that you can use to verify yourself to delete/edit comments and perform other administrative actions.  Customization Custom color schemes are applied to HashOver comments.Muut For those who don&amp;rsquo;t want to also host the comments on their site, BluestNight provides support for Muut. For more about the decision to support Muut, click here.Click here for a current comparison between the free and paid tiers of Muut&amp;rsquo;s service.Setup To begin, sign up for a free Muut account. Make sure to keep track of the name you give your Muut Community, as you will need that information later. You may be automatically enrolled in a free trial of a paid subscription. You will be dropped down to a free subscription at the end of the trial.Remember the name you gave your Muut community? That will go in your site&amp;rsquo;s configuration file as the value for muut under Params:# In config.toml [Params] muut = &amp;quot;mycommunity&amp;quot;  After running hugo, you should now have Muut comments on all pages you have them enabled on.",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/comments/"
},{
  "name": "Customize List Pages",
  "description": "BluestNight provides a number of ways for you to customize list pages using _index.md files.",
  "body": "BluestNight provides a number of ways for you to customize list pages using _index.md files.Custom content If you create an _index.md file for a list page and put content in it, that content will appear above the list on the generated page.Hide the list Maybe you don&amp;rsquo;t want to display the list of pages, just your custom content. Set hide_list to true in the front matter of the _index.md file and BluestNight will only generate the custom content on that page.Show nested sections Sections onlyIf you want to display the nested sections under the one a list page represents, set list_subsections to true in the page&amp;rsquo;s front matter. The list will not be displayed if hide_list is set to true.Sort/filter listed pages By default, BluestNight (and Hugo) sort the pages under a section or taxonomy by date, with the newest page first. You have the ability to choose what page field to sort by and in ascending or descending order. You also have the ability to filter only pages with the file name index.md.Custom sort field To sort the entries in the list, set the values of sort_field and (optionally) sort_order in the list page&amp;rsquo;s front matter. Valid values for sort_field are any ordering page variable without the leading By OR any front matter variable with the prefix Params. If the template sorting method you want to use in the Hugo docs is ByDate, sort_field should be &amp;quot;Date&amp;quot;. If sorting by the custom front matter parameter sorting_weight, sort_field should be &amp;quot;Params.sorting_weight&amp;quot; (note the lack of a leading . on Params).  Custom sort order Valid values for sort_order are &amp;quot;asc&amp;quot; and &amp;quot;desc&amp;quot;. If sort_order is not specified, the order will depend on what makes the most sense for that field. sort_order is ignored if sort_field is not specified. Date fields are descending (new first) by default. Title and Weight fields are ascending (A-Z and 1-9) by default. Sort fields beginning with Params are also ascending by default and cannot currently be changed.  To sort the pages in a custom order, you can set a variable in the front matter, for example sort_weight, and number the pages in the order you want them to appear in.+++ # file name: _index.md title = &amp;quot;List page&amp;quot; sort_field = &amp;quot;Params.sort_weight&amp;quot; +++ +++ # file name: first.md title = &amp;quot;First article&amp;quot; sort_weight = 1 +++ +++ # file name: second.md title = &amp;quot;Second article&amp;quot; sort_weight = 2 +++  Filter only index.md To display only those pages with the file name index.md, set index_only to true in the list page&amp;rsquo;s front matter. You may want to use this if a section contains folders of content that are not subsections of this one (i.e. have a file _index.md), but only want to list the entry pages of those folders.+++ index_only = true +++  Examples This site author wants to display a message to their readers before showing the most recent posts.+++ # Found under &amp;quot;post/_index.md&amp;quot; title = &amp;quot;My Awesome Posts&amp;quot; hide_list = false +++ Before you get to my posts, I just want you all to know how much I appreciate your readership and your feedback on my posts.  This site author provides a multi-page how-to guide and wants users to start with a link to the first item so they don&amp;rsquo;t skip ahead.+++ # Found under &amp;quot;how-to/install-linux/_index.md&amp;quot; title = &amp;quot;How to Install Linux&amp;quot; hide_list = true # Won&#39;t show any other pages under &amp;quot;how-to/install-linux&amp;quot; +++ If you&#39;ve ever wanted to install a Linux distribution on your computer but weren&#39;t sure how, this guide is for you! (More introductory stuff about installing Linux - this is a code example, I don&#39;t need to write a full paragraph!) [Start here]({{&amp;lt; ref &amp;quot;how-to/install-linux/1.md&amp;quot; &amp;gt;}}). ",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/custom-list-pages/"
},{
  "name": "Events",
  "description": "You have a list of events you want to share with your reader base - why not display them on your site?BluestNight provides both a sidebar widget to display the 5 earliest occurring events listed and a template for a .ics calendar file that readers can subscribe to.",
  "body": "You have a list of events you want to share with your reader base - why not display them on your site?BluestNight provides both a sidebar widget to display the 5 earliest occurring events listed and a template for a .ics calendar file that readers can subscribe to.Setup Place a data file for each event in the data/events/ directory for your site. You will need to create the events subdirectory. The data files should have the following key/value pairs: name: The name of the event. startDatetime: The date and time that the event starts, in a time format that Hugo recognizes. endDatetime: The date and time that the event ends, in a time format that Hugo recognizes. location: Where the event is taking place. description: A short description of the event.  To enable events on your site, set upcoming_events to true under Params.widgets in your sites configuration folder:# In config.toml [Params.widgets] upcoming_events = true  Limitations  Items do not automatically disappear from the sidebar  BluestNight automatically filters out events that have already passed when adding events to the sidebar, but it cannot dynamically remove them as they pass, due to it being a static site. It is on the site administrator to at least rebuild the site after an event has passed, though I suggest considering removing the data file as well.  ",
  "url": "https://GW-Rocket-Team.github.io/docs/sidebar/events/"
},{
  "name": "Handwriting Fonts",
  "description": "Sometimes (sans-)serif fonts just don&amp;rsquo;t cut it for what you&amp;rsquo;re writing. You&amp;rsquo;re posting a letter on your website and want it to look handwritten, or at least have the signature look handwritten. The handwriting shortcode provides you with a number of available handwriting fonts to achieve this effect.",
  "body": "Sometimes (sans-)serif fonts just don&amp;rsquo;t cut it for what you&amp;rsquo;re writing. You&amp;rsquo;re posting a letter on your website and want it to look handwritten, or at least have the signature look handwritten. The handwriting shortcode provides you with a number of available handwriting fonts to achieve this effect.Usage {{% handwriting &amp;quot;font-name&amp;quot; %}} This text will look handwritten. {{% /handwriting %}}  Be sure to use %% and not &amp;lt;&amp;gt; as the one with % sends the content through the markdown parser, allowing you to still have bold, italics, etc. with your handwriting font. More here.Available fonts are: &amp;quot;allura&amp;quot; &amp;quot;calligraffiti&amp;quot; &amp;quot;dancing-script&amp;quot; &amp;quot;daniel&amp;quot; &amp;quot;euphoria-script&amp;quot; &amp;quot;journal&amp;quot; &amp;quot;kingthings-wrote&amp;quot; &amp;quot;note-this&amp;quot; &amp;quot;vag-handwritten&amp;quot;  All fonts come from FontSquirrel, a website devoted to providing 100% free fonts, including for commercial use.",
  "url": "https://GW-Rocket-Team.github.io/docs/shortcodes/handwriting/"
},{
  "name": "Link To Static Files",
  "description": "There&#39;s a limitation with the way links are created in markdown. Sites whose BaseURL is in a subdirectory of a site (i.e. https://example.com/subdir/) may not link correctly using existing methods. This shortcode helps circumvent this limitation.",
  "body": "(Examples use a file at /static/path/to/image.jpg)There&amp;rsquo;s a limitation with the way links are created in markdown. In order to link to static files in content files, we need to either: Write a path relative to the current directory, with ../ and the like, so a file at content/section/subsection/page.md would need ../../../path/to/image.jpg Prefix the path with a leading /, which causes the path to resolve to example.com/path/to/image.jpg  The first is a pain to have to do, and the second only works if the baseURL of your Hugo site is example.com. A site at example.com/subdir/ will still resolve the link to example.com/path/to/image.jpg, which won&amp;rsquo;t exist.To get around this limitation (at least until it gets implemented in Hugo), BluestNight includes a shortcode called static that will correctly resolve links to static files according to the site&amp;rsquo;s baseURL. The syntax is similar to the ref and relref shortcodes:![Image alt text]({{&amp;lt; static &amp;quot;path/under/static/folder/file.jpg&amp;quot; &amp;gt;}}) [Link text]({{&amp;lt; static &amp;quot;other/static/folder/file.txt&amp;quot; &amp;gt;}})  Example output, using a baseURL of http://example.com/subdir/:Link text ",
  "url": "https://GW-Rocket-Team.github.io/docs/shortcodes/static/"
},{
  "name": "Members",
  "description": "Looking to put together a nice Members page for your site, but don&amp;rsquo;t want to write a bunch of custom HTML to make it look good?Just use the {{&amp;lt; member &amp;gt;}} shortcode!",
  "body": "Looking to put together a nice Members page for your site, but don&amp;rsquo;t want to write a bunch of custom HTML to make it look good?Just use the {{&amp;lt; member &amp;gt;}} shortcode!Setup This setup is necessary for both the member shortcode and the authorbox feature!Create a data file for each member in your site&amp;rsquo;s data/members directory with keys Name, Img (optional), URL (optional), Position, and Bio.The URL field should indicate that particular member&amp;rsquo;s home page, either on the same site (if they have a profile page) or on a separate site.If a user doesn&amp;rsquo;t have an Img key, the default photo will be used instead.HUGOMORE42An example data file, to be found under data/members/shadow53.yml:# This example uses YAML Name : &#34;Michael Bryant&#34; Img : &#34;/path/to/picture/of/michael.jpg&#34; Position : &#34;Awesome Theme Designer&#34; URL : https://mnbryant.com Bio : | I&#39;m Michael, also known as Shadow53. This bio section is intended to have a small paragraph&#39;s worth of text in it so it takes up about as much space on the screen as the profile picture, because I think that looks nice. Lorem Ipsum. Foo, bar, baz, and all that. Usage Just use the shortcode wherever you want the member entry to appear on the page. Syntax is   where &amp;quot;Member Name&amp;quot; is replaced with the value of the Name field in the data file. So, using the example above:Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque convallis sollicitudin arcu sed volutpat. Suspendisse ante erat, elementum eget orci a, consectetur condimentum est. Sed leo ipsum, laoreet eu rhoncus id, posuere ut sem. Pellentesque blandit, tortor sit amet lobortis tristique, sem felis pellentesque orci, vel interdum lacus magna et est. In fringilla facilisis ultrices. Maecenas at bibendum tellus. Vivamus imperdiet volutpat lacus, a tempor enim rutrum at. {{&amp;lt; member &amp;quot;Michael Bryant&amp;quot; &amp;gt;}} Sed tristique ex eros. Donec vestibulum nunc sed mattis efficitur. Mauris mollis libero quis tellus interdum, id venenatis dolor gravida. Praesent dignissim tempor blandit. Duis ut nisi eget arcu molestie dapibus. Cras viverra magna id tincidunt ultrices. Nam id cursus diam, in ultricies sem. Ut convallis eget metus non feugiat. Integer elementum consequat risus vitae lobortis. Curabitur dapibus, lectus nec vulputate laoreet, leo elit gravida odio, ac dapibus nisl ex vel justo. Maecenas ornare lobortis ante nec blandit. ",
  "url": "https://GW-Rocket-Team.github.io/docs/shortcodes/members/"
},{
  "name": "Netlify Forms",
  "description": "If you are using Netlify to host your Hugo site, BluestNight supports creating Netlify-compatible forms in your content files through the use of a few shortcodes.",
  "body": "If you are using Netlify to host your Hugo site, BluestNight supports creating Netlify-compatible forms in your content files through the use of a few shortcodes.Note that all parameters to these shortcodes are named parameters.This shortcode requires you to use the {{&amp;lt; shortcode &amp;gt;}} method of calling shortcodes. Using {{% shortcode %}} instead will cause the form to render incorrectly. netlify-form The netlify-form shortcode serves as a wrapper to the rest of the shortcodes on this page. Without it you may be able to use the other shortcodes to make form elements, but they won&amp;rsquo;t submit anywhere. The other shortcodes are designed to be used as inner content to netlify-form.Required Parameters: name: Equivalent to the name attribute on an HTML &amp;lt;form&amp;gt;. Must be unique among forms on the page.  Optional Parameters: action: The page to take the user to after they submit the form. Ideally should thank them for their submission. Defaults to a page from Netlify that redirects back to the page they left.  Example &amp;ldquo;Contact&amp;rdquo; form:{{&amp;lt; netlify-form name=&amp;quot;contact&amp;quot; &amp;gt;}} {{&amp;lt; form-input id=&amp;quot;firstname&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;John&amp;quot; label=&amp;quot;First Name:&amp;quot; required=&amp;quot;true&amp;quot; &amp;gt;}} {{&amp;lt; form-input id=&amp;quot;lastname&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Doe&amp;quot; label=&amp;quot;Last Name:&amp;quot; &amp;gt;}} {{&amp;lt; form-input id=&amp;quot;reply_email&amp;quot; type=&amp;quot;email&amp;quot; placeholder=&amp;quot;john.doe@email.com&amp;quot; label=&amp;quot;Reply-To Email:&amp;quot; required=&amp;quot;true&amp;quot; &amp;gt;}} {{&amp;lt; mult-input label=&amp;quot;Gender:&amp;quot; name=&amp;quot;gender&amp;quot; required=&amp;quot;true&amp;quot; add_other=&amp;quot;true&amp;quot; type=&amp;quot;select&amp;quot; &amp;gt;}} {{&amp;lt; form-option label=&amp;quot;Male&amp;quot; value=&amp;quot;male&amp;quot; &amp;gt;}} {{&amp;lt; form-option label=&amp;quot;Female&amp;quot; value=&amp;quot;female&amp;quot; &amp;gt;}} {{&amp;lt; /mult-input &amp;gt;}} {{&amp;lt; form-input type=&amp;quot;text&amp;quot; id=&amp;quot;submit_reason&amp;quot; required=&amp;quot;true&amp;quot; label=&amp;quot;Reason for contacting:&amp;quot; placeholder=&amp;quot;Problem with site&amp;quot; &amp;gt;}} {{&amp;lt; form-input id=&amp;quot;contact_description&amp;quot; type=&amp;quot;textarea&amp;quot; label=&amp;quot;Explain:&amp;quot; required=&amp;quot;true&amp;quot; &amp;gt;}} {{&amp;lt; /netlify-form &amp;gt;}}  form-input The form-input shortcode is used to create any form input except radio buttons and checkboxes, which are handled by mult-input instead. See here for a list of valid HTML &amp;lt;input&amp;gt; types.BluestNight makes a few changes to the above list of input types for this shortcode. First, textarea is considered a valid input type, equivalent to the HTML &amp;lt;textarea&amp;gt; element, which is a multiline text entry field. Second, all &amp;ldquo;button&amp;rdquo; types are considered invalid, as the form automatically includes buttons to submit and clear the form. These invalid types are: button: A standard button image: A button made from an image submit: Submits the form reset: Clears the form, allowing the user to start over  If you enter an invalid input type, BluestNight will render a small warning where the input element should be.Required parameters: type: A valid input type from the above link. id: A unique identifier for the input field. Must be unique across input elements in all forms on the page. accept: Only for type=&amp;quot;file&amp;quot; inputs. Specify valid file types to submit. See here for what valid values look like.  Optional parameters: placeholder: Placeholder text to appear inside the element as an example of valid input. minlength/maxlength: Set the minimum and/or maximum character length for the input. regex: A regular expression that valid input must match. Use types email, url, date, or time if you want to validate against one of those. value: Set a default value in the input field. Not recommended unless you have good reason. required: &amp;quot;true&amp;quot; if this input field is required. Numeric and Datetime inputs (number, range, date)  min: The minimum value allowed. See more. max: The maximum value allowed. See more. step: If specified, indicates that the value of the input must be equal to min + n * step, where n is an integer. See more.  file and email type inputs  multiple: &amp;quot;true&amp;quot; if more than one file or email address can be entered in this field.   mult-input The mult-input shortcode acts as a wrapper around multiple related radio or checkbox elements.Required parameters: type: radio or select for when only one selection can be made and checkbox for multiple selections. name: A unique identifier for the input field. Must be unique across input elements in all forms on the page. label: A label for the group of radio buttons or checkboxes  Optional parameters: add_other: &amp;quot;true&amp;quot; to add an &amp;ldquo;other&amp;rdquo; option to the end of the list with an accompanying textbox below it. required: For radio and select types. &amp;quot;true&amp;quot; if a selection is required.  form-option The form-option shortcode indicates one of a group of related options under a mult-input.Required parameters: label: A label for this particular option. value: The value returned from the form when this option is selected. Is not displayed to the end user.  Optional parameters: selected: &amp;quot;true&amp;quot; for this option to be selected by default. Only add this to one option for radio and select types. required: checkbox only. &amp;quot;true&amp;quot; if this checkbox must be checked before the form is submitted. Do not use to indicate that at least one checkbox must be checked. ",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/netlify-forms/"
},{
  "name": "Page Navigation",
  "description": "BluestNight supports using the Hugo built-in NextInSection and PrevInSection [page variables] to provide &amp;ldquo;next&amp;rdquo; and &amp;ldquo;previous&amp;rdquo; links to the next and previous page in the same section. On its own, this works great for linking a reader to next oldest or newest post from the one they have just finished reading.Sometimes you want a specific order to your pages, though, and that&amp;rsquo;s not the one that Hugo gives you. So, BluestNight also gives you the option to specify a custom content file to use as the &amp;ldquo;next&amp;rdquo; or &amp;ldquo;previous&amp;rdquo; page, as well as the ability to not show one or both buttons, even if there is a valid &amp;ldquo;next&amp;rdquo; or &amp;ldquo;previous&amp;rdquo; page.",
  "body": "BluestNight supports using the Hugo built-in NextInSection and PrevInSection [page variables] to provide &amp;ldquo;next&amp;rdquo; and &amp;ldquo;previous&amp;rdquo; links to the next and previous page in the same section. On its own, this works great for linking a reader to next oldest or newest post from the one they have just finished reading.Sometimes you want a specific order to your pages, though, and that&amp;rsquo;s not the one that Hugo gives you. So, BluestNight also gives you the option to specify a custom content file to use as the &amp;ldquo;next&amp;rdquo; or &amp;ldquo;previous&amp;rdquo; page, as well as the ability to not show one or both buttons, even if there is a valid &amp;ldquo;next&amp;rdquo; or &amp;ldquo;previous&amp;rdquo; page.Setup Set post_navigation to true under [Params] in your site&amp;rsquo;s configuration file OR a particular page&amp;rsquo;s front matter# In config.toml [Params] post_navigation = true  +++ # In some-content.md # Other front-matter goes here post_navigation = true +++  You can also have navigation enabled sitewide but disable it on a particular page by setting post_navigation to false in the front matter.+++ # In some-content.md # Other front-matter goes here # No next/previous buttons will be generated post_navigation = false +++  Custom targets To set custom targets for a page&amp;rsquo;s next/previous links, set the values of custom_next and/or custom_prev to the relative path of the page&amp;rsquo;s content file. That is, for a file located under SITE_ROOT/content/post/my-cool-page.md, the value should be post/my-cool-page.md.Make sure there are no leading slashes, or else the button will not be created+++ # In post/some-content.md # Other front-matter goes here custom_next = &amp;quot;post/my-cool-page.md&amp;quot; custom_prev = &amp;quot;post/my-other-cool-page.md&amp;quot; +++  Disable a button For pages that you want to order in any order other than by date, Hugo might say that your first page has a page that comes &amp;ldquo;previous&amp;rdquo; and will try to create a previous button on a page where you don&amp;rsquo;t want one. If you set custom_prev or custom_next to &amp;quot;none&amp;quot;, its corresponding button will not be created. Actually, any value that is not a valid path to a content file (as described above) will cause the button to not load. It&amp;rsquo;s simpler to tell people to use &amp;quot;none&amp;quot;, even though &amp;quot;nope&amp;quot;, &amp;quot;hide&amp;quot;, and &amp;quot;disable&amp;quot; will all work as well. +++ # In post/some-content.md # Other front-matter goes here custom_next = &amp;quot;post/my-cool-page.md&amp;quot; # No &amp;quot;previous&amp;quot; button will be created custom_prev = &amp;quot;none&amp;quot; +++ ",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/next-prev-page/"
},{
  "name": "Patreon Banner",
  "description": "Have a Patreon account? Add a Patreon banner to the sidebar of your site that links to it!",
  "body": "Have a Patreon account? Add a Patreon banner to the sidebar of your site that links to it!Setup Add a key patreon under Params.widgets in your site config file with the value of the &amp;ldquo;slug&amp;rdquo; of your Patreon page (the part coming after patreon.com/# config.toml [Params.widgets] patreon = &amp;quot;shadow53&amp;quot; # Links to https://patreon.com/shadow53  BluestNight will do its best to determine if it should say &amp;ldquo;Support Me on Patreon&amp;rdquo; or &amp;ldquo;Support Us on Patreon&amp;rdquo; by checking how many members are listed on the site. If one or none, it assumes this is a personal website and will use &amp;ldquo;Me&amp;rdquo;. If more than one, it assumes the website belongs to an organization and says &amp;ldquo;Us&amp;rdquo;.Custom Banner BluestNight tries to automatically figure out if the black or white Patreon banner will fit best on your site by calculating the relative luminance of the main backaground color. If this does not work well with your color scheme, or you prefer something other than the default banner, you can specify the URL to a different image. Consider using one of the other official Patreon banners, found here.When you have the URL to your patreon banner of choice (this can be a relative URL to an image in your static/ directory), add it under Params.widgets as the value for patreon_banner.# config.toml [Params.widgets] patreon = &amp;quot;shadow53&amp;quot; # Links to https://patreon.com/shadow53 patreon_banner = &amp;quot;https://c4.patreon.com/toolbox/patreon_logo.png&amp;quot;  The image will be automatically resized on the page to fit within the width of the sidebar.",
  "url": "https://GW-Rocket-Team.github.io/docs/sidebar/patreon-banner/"
},{
  "name": "Recent Posts",
  "description": "Display your most recent posts in the sidebar!The recent article sidebar widget displays the ten most recent pages under the post section, as well as buttons to subscribe to the RSS feeds of the whole site and the current section or taxonomy (tag/category).",
  "body": "Display your most recent posts in the sidebar!The recent article sidebar widget displays the ten most recent pages under the post section, as well as buttons to subscribe to the RSS feeds of the whole site and the current section or taxonomy (tag/category).Hugo considers a content folder a &amp;ldquo;section&amp;rdquo; if it is a direct child of the content/ folder (e.g. content/post/) or if it contains an _index.md file. The section that BluestNight matches is the closest valid section to the current page. For example, this site has the folder docs/ as a direct child of the content/ folder, so it is a section. The child folders pages/, shortcodes, sidebar, and site do not have an _index.md file, so they are not a nested section. Thus the closest valid section for a page in any of those folders is docs.HUGOMORE42Setup Set recent_articles to true under Params.widgets in the site configuration file.# config.toml [Params.widgets] recent_articles = true # Enable recent articles view ",
  "url": "https://GW-Rocket-Team.github.io/docs/sidebar/recent-posts/"
},{
  "name": "Responsive Tables",
  "description": "The markdown processor bundled with Hugo has the ability to parse markdown tables, but these tables are not mobile-friendly (like most tables).This didn&amp;rsquo;t work well for me, since my markdown tables were rendering poorly on mobile devices due to automatic content sizing. More often than not, the table ended up overflowing and looking unprofessional. So I put together a set of shortcodes to help create tables that would shift around on small screens to be more readable.",
  "body": " The markdown processor bundled with Hugo has the ability to parse markdown tables, but these tables are not mobile-friendly (like most tables).This didn&amp;rsquo;t work well for me, since my markdown tables were rendering poorly on mobile devices due to automatic content sizing. More often than not, the table ended up overflowing and looking unprofessional. So I put together a set of shortcodes to help create tables that would shift around on small screens to be more readable.Below you can compare a normal markdown table with a responsive table. Just resize the window or, if you&amp;rsquo;re on mobile, try rotating your screen between portrait and landscape.Normal table   Column 1 Column 2 Column 3 Column 4     Some random text Blah blah blah Random data here The fourth column   Another row Hey, why not? Zebra stripes! End of the line    | Column 1 | Column 2 | Column 3 | Column 4 | |------------------|----------------|------------------|-------------------| | Some random text | Blah blah blah | Random data here | The fourth column | | Another row | Hey, why not? | Zebra stripes! | End of the line | Responsive table Column 1Column 2Column 3Column 4   Some random text Blah blah blah Random data here The fourth column   Another row Hey, why not? Zebra stripes! End of the line    {{&amp;lt; table &amp;quot;Column 1&amp;quot; &amp;quot;Column 2&amp;quot; &amp;quot;Column 3&amp;quot; &amp;quot;Column 4&amp;quot; &amp;gt;}} {{&amp;lt; table-row &amp;gt;}} {{% table-cell %}}Some random text{{% /table-cell %}} {{% table-cell %}}Blah blah blah{{% /table-cell %}} {{% table-cell %}}Random data here{{% /table-cell %}} {{% table-cell %}}The fourth column{{% /table-cell %}} {{&amp;lt; /table-row &amp;gt;}} {{&amp;lt; table-row &amp;gt;}} {{% table-cell %}}Another row{{% /table-cell %}} {{% table-cell %}}Hey, why not?{{/*% /table-cell */%}} {{% table-cell %}}Zebra stripes!{{% /table-cell %}} {{% table-cell %}}End of the line{{% /table-cell %}} {{&amp;lt; /table-row &amp;gt;}} {{&amp;lt; /table &amp;gt;}}  How To Use The responsive table is made up of three shortcodes. {{&amp;lt; table &amp;gt;}}, serves as a container for the other shortcodes and defines the names of each of the columns. After &amp;ldquo;table&amp;rdquo; comes a list of column names in the order that they should appear, from left to right. {{&amp;lt; table-row &amp;gt;}} serves as a container for {{% table-row %}} and does not take any parameters. {{% table-row %}} takes content in between the opening and closing tags. There should be a number of {{% table-row %}} tags equal to the number of column names, and values should appear in the same order as their labels do.  Known Limitations  {{&amp;lt; table &amp;gt;}} and {{&amp;lt; table-row &amp;gt;}} must use the {{&amp;lt;&amp;gt;}} syntax for shortcodes. Using {{%%}} will cause the inner HTML to display inside a code block instead or rendering on the page. {{% table-row %}} can use either, though {{%%}} is recommended so you can use markdown inside of the cell. {{% table-cell %}} tags must be on the same line as content, or else an issue occurs similar to the one above. Reference style markdown links cannot be used inside of {{% table-cell %}} tags. Inline link syntax ([link text](url)) works fine. The shortcodes do not support colspan, rowspan, &amp;lt;caption&amp;gt;, or table footers. Then again, neither do markdown tables&amp;hellip;  ",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/responsive-tables/"
},{
  "name": "Search",
  "description": "BluestNight offers client-side searching powered by Lunr.js. This searching is powered by a JSON index of your site&amp;rsquo;s content pages - this does not include any list pages, even ones customized using _index.md. Results are displayed as you type, allowing users to quickly find what they are looking for.",
  "body": "BluestNight offers client-side searching powered by Lunr.js. This searching is powered by a JSON index of your site&amp;rsquo;s content pages - this does not include any list pages, even ones customized using _index.md. Results are displayed as you type, allowing users to quickly find what they are looking for.Setup Set search to true under Params.widgets and add &amp;quot;JSON&amp;quot; to the output types for home in your site&amp;rsquo;s configuration file.# In config.toml [Params.widgets] search = true [outputs] home = [&amp;quot;HTML&amp;quot;, &amp;quot;CSS&amp;quot;, &amp;quot;RSS&amp;quot;, &amp;quot;JSON&amp;quot;] ",
  "url": "https://GW-Rocket-Team.github.io/docs/sidebar/search/"
},{
  "name": "Social Icons",
  "description": "Social icons are an easy way to link viewers of your site to other parts of your online presence, such as to your Facebook, Twitter, LinkedIn, GitHub, and more. The complete list is below.",
  "body": "Social icons are an easy way to link viewers of your site to other parts of your online presence, such as to your Facebook, Twitter, LinkedIn, GitHub, and more. The complete list is below.Setup Everything here goes under [Params.social] in your site&amp;rsquo;s config.toml file.Example (from Shadow53&amp;rsquo;s blog):[Params.social] linkedin = &amp;quot;shadow53&amp;quot; github = &amp;quot;Shadow53&amp;quot; steam = &amp;quot;id/shad0w0710&amp;quot;  Full list of social links and how to link to them: DeviantArt (deviantart = &amp;quot;username&amp;quot;) Facebook (facebook = &amp;quot;userid&amp;quot;)  Your Facebook user id is what comes after &amp;ldquo;https://facebook.com/&amp;quot; on your public profile page  GitHub (github = &amp;quot;username&amp;quot; or `github = &amp;ldquo;username/project-name&amp;rdquo;) GitLab (gitlab = &amp;quot;username&amp;quot; or `gitlab = &amp;ldquo;username/project-name&amp;rdquo;) Google Plus (googleplus = &amp;quot;+Joe-Smith&amp;quot;) Instagram (instagram = &amp;quot;username&amp;quot;) LinkedIn (linkedin = &amp;quot;userid&amp;quot;) Medium (medium = &amp;quot;username&amp;quot;) Pinterest (pinterest = &amp;quot;username&amp;quot;)  Your username is whatever follows &amp;ldquo;https://pinterest.com/&amp;quot; on your profile page  Quora (`quora = &amp;ldquo;userid&amp;rdquo;)  Your userid is whatever follows &amp;ldquo;https://quora.com/profile/&amp;quot; on your profile page  Reddit (reddit = &amp;quot;username&amp;quot;) Slack Organization (slack_org = &amp;quot;subdomain&amp;quot;)  Your subdomain is whatever comes after &amp;ldquo;https://&amp;rdquo; and before &amp;ldquo;.slack.com&amp;rdquo;  Soundcloud (soundcloud = &amp;quot;userid&amp;quot;)  Your userid is whatever comes after &amp;ldquo;https://soundcloud.com/&amp;quot; on your profile page  Spotify (spotify = &amp;quot;username&amp;quot;) Steam (steam = &amp;quot;id/username&amp;quot; OR &amp;quot;profiles/48624573984729386&amp;quot;)  If you have a custom profile link set up, it will be id/your-login-username If not, it will be profiles/your-steam-userid-number You may need to look yourself up on the Steam Community to figure out which to use. The content you use will be the part of the URL after steamcommunity.com  Tumblr (tumblr = &amp;quot;username&amp;quot;) Twitch (twitch = &amp;quot;username&amp;quot;) Twitter (twitter = &amp;quot;username&amp;quot;) Vimeo (vimeo = &amp;quot;userid&amp;quot;)  It seems some users have custom URLs and some are identified as &amp;ldquo;user1234567&amp;rdquo;. Use whatever comes after &amp;ldquo;https://vimeo.com/&amp;quot; on your profile page.  ",
  "url": "https://GW-Rocket-Team.github.io/docs/site/social-icons/"
},{
  "name": "Summaries",
  "description": "Hugo provides a mechanism for extracting the first part of a page&amp;rsquo;s content to serve as a &amp;ldquo;summary&amp;rdquo; of the content. This works if the first bit of content serves as a good summary of the rest of the page. Sometimes, though, it doesn&amp;rsquo;t. There&amp;rsquo;s no built-in method for providing your own text as a &amp;ldquo;summary&amp;rdquo; - but there is in BluestNight.",
  "body": "Hugo provides a mechanism for extracting the first part of a page&amp;rsquo;s content to serve as a &amp;ldquo;summary&amp;rdquo; of the content. This works if the first bit of content serves as a good summary of the rest of the page. Sometimes, though, it doesn&amp;rsquo;t. There&amp;rsquo;s no built-in method for providing your own text as a &amp;ldquo;summary&amp;rdquo; - but there is in BluestNight.Setup In your page&amp;rsquo;s front matter, provide the text as the value of the description parameter. For example:+++ title = &amp;quot;Some Random Page&amp;quot; description = &amp;quot;A page containing dummy Lorem Ipsum text to illustrate how one can provide a custom page \\&amp;quot;summary\\&amp;quot; that is not taken from the first bit of text found on the page.&amp;quot; +++ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut sodales justo a nibh suscipit, sed condimentum mauris viverra. Morbi felis nisl, tempus ac leo auctor, lobortis ultricies tellus. Mauris iaculis metus at quam vestibulum, nec hendrerit neque consequat. Etiam in auctor risus. Morbi dolor diam, cursus ac tristique vel, rutrum sit amet neque. Praesent vel neque in ex varius ullamcorper. Vivamus eu gravida neque. Pellentesque nec scelerisque nulla.  (The backslashes are there to &amp;ldquo;escape&amp;rdquo; the double-quotation marks so they aren&amp;rsquo;t interpreted as the end of the description)Priority The order of priority for which kind of &amp;ldquo;summary&amp;rdquo; is used is as follows: description from the page front matter The Hugo-provided page summary  If, for some reason, BluestNight does not receive text from any of the above (both ended up being empty strings), it will fall back to using the site&amp;rsquo;s generic description for the page. This should not happen unless the site author or theme developer has messed things up.Where it&amp;rsquo;s used The page&amp;rsquo;s summary is used in the following areas: When the page appears in a list of pages:  The &amp;ldquo;posts&amp;rdquo; page A list of pages with a specific tag Etc.  As the page&amp;rsquo;s description/excerpt for search engine results ",
  "url": "https://GW-Rocket-Team.github.io/docs/pages/summaries/"
},{
  "name": "Survey",
  "description": "Please take a moment and tell me what you think about BluestNight.First name:    Last name:    Reply-to email:    Do you use BluestNight on your website?   Yes    No      If yes, what has your experience been like?    If no, why not?   Not what I&amp;#39;m looking for    Too confusing to use    I hadn&amp;#39;t heard about it before    Other      What, if anything, would you say BluestNight does well at?",
  "body": "Please take a moment and tell me what you think about BluestNight.First name:    Last name:    Reply-to email:    Do you use BluestNight on your website?   Yes    No      If yes, what has your experience been like?    If no, why not?   Not what I&amp;#39;m looking for    Too confusing to use    I hadn&amp;#39;t heard about it before    Other      What, if anything, would you say BluestNight does well at?   Plenty of customization    Detailed documentation    Pages load quickly    Developer friendly    Responsive design    Looks professional    Other      Explain:    What, if anything, should be improved in BluestNight?   Site build time    Too many features    More approachable documentation    Too many bugs    Other      Explain:    Is there anything else you would like to share?    If you entered an email above, may I contact you for follow-up information?   Yes    No/Didn&amp;#39;t enter email      Reset  Submit    ",
  "url": "https://GW-Rocket-Team.github.io/survey/"
},{
  "name": "Tag List",
  "description": "Show a cloud of the tags you&amp;rsquo;ve used on the site in your sidebar.This widget currently shows all of the tags used on the website, in order of how often they are used (most common listed first, etc.) You can optionally enable showing how many times the tag has been used.",
  "body": "Show a cloud of the tags you&amp;rsquo;ve used on the site in your sidebar.This widget currently shows all of the tags used on the website, in order of how often they are used (most common listed first, etc.) You can optionally enable showing how many times the tag has been used.Setup Set tags to true under Params.widgets in your site&amp;rsquo;s configuration file to enable tags in the sidebar. Set tags_counter to true to should a count of how often the tag appears on the site in the tag button.# In config.toml [Params.widgets] tags = true # Enable tags in the sidebar tags_counter = true # Show how often tags appear ",
  "url": "https://GW-Rocket-Team.github.io/docs/sidebar/tag-list/"
}
]
